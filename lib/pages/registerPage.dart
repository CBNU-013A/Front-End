import 'package:flutter/material.dart';
import '../api_service.dart';
import 'loginPage.dart'; // ÌöåÏõêÍ∞ÄÏûÖ ÌõÑ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter/cupertino.dart';
import 'package:intl/intl.dart';
import '../styles/styles.dart';
import '../main.dart';

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});

  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  //final TextEditingController birthdateController = TextEditingController();
  DateTime selectedDate = DateTime.now();
  bool _isDatePickerOpen = false;

  void _showDatePicker(BuildContext context) {
    setState(() {
      _isDatePickerOpen = true; // ‚úÖ DatePicker Ïó¥Î¶¥ Îïå trueÎ°ú ÏÑ§Ï†ï
    });
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) => Container(
        height: 300,
        color: Colors.white,
        child: Column(
          children: [
            // ÏôÑÎ£å Î≤ÑÌäº
            SizedBox(
              height: 50,
              child: CupertinoButton(
                child: const Text('ÏôÑÎ£å',
                    style: TextStyle(color: CupertinoColors.activeBlue)),
                onPressed: () {
                  setState(() {
                    _isDatePickerOpen = false; // ‚úÖ Îã´Ìûê Îïå falseÎ°ú ÏÑ§Ï†ï
                  });
                  Navigator.pop(context); // ÌåùÏóÖ Îã´Í∏∞
                }, // ÌåùÏóÖ Îã´Í∏∞
              ),
            ),
            // ÎÇ†Ïßú ÏÑ†ÌÉùÍ∏∞
            Expanded(
              child: CupertinoDatePicker(
                mode: CupertinoDatePickerMode.date, // Ïó∞, Ïõî, Ïùº Î™®Îìú
                initialDateTime: selectedDate ?? DateTime.now(),
                minimumDate: DateTime(1900, 1, 1), // ÏµúÏÜå ÎÇ†Ïßú
                maximumDate: DateTime.now(), // ÏµúÎåÄ ÎÇ†Ïßú
                onDateTimeChanged: (DateTime date) {
                  setState(() {
                    selectedDate = date;
                  });
                },
              ),
            ),
          ],
        ),
      ),
    ).then((_) {
      // ‚úÖ ÏÇ¨Ïö©ÏûêÍ∞Ä Î∞îÍπ•ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÌåùÏóÖÏùÑ Îã´ÏïòÏùÑ Îïå
      setState(() {
        _isDatePickerOpen = false;
      });
    });
  }

  bool _isPasswordVisible = false;

  void _register() async {
    String formattedDate =
        DateFormat('yyyy-MM-dd').format(selectedDate); // ÎÇ†Ïßú Ìè¨Îß∑ Ï†ÅÏö©
    String name = nameController.text;

    debugPrint("üìåregisterPage.dart : ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:");
    debugPrint("Ïù¥Î¶Ñ: ${nameController.text}");
    debugPrint("Ïù¥Î©îÏùº: ${emailController.text}");
    debugPrint("ÎπÑÎ∞ÄÎ≤àÌò∏: ${passwordController.text}");
    debugPrint("ÏÉùÎÖÑÏõîÏùº: $selectedDate\n");

    bool success = await ApiService().register(
      nameController.text,
      emailController.text,
      passwordController.text,
      selectedDate,
    );

    if (!mounted) return;

    if (success) {
      rootScaffoldMessengerKey.currentState!.showSnackBar(
        SnackBarStyles.info("üòé ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ !"),
      );

      await Future.delayed(const Duration(seconds: 2));

      if (mounted) {
        ScaffoldMessenger.of(context)
            .hideCurrentSnackBar(); // ‚úÖ ÌéòÏù¥ÏßÄ Ïù¥Îèô Ï†Ñ Ïä§ÎÇµÎ∞î Ïà®Í∏∞Í∏∞
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const LoginPage()),
        );
      }
    } else {
      rootScaffoldMessengerKey.currentState!.showSnackBar(
        SnackBarStyles.info("üòì ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå® !"),
      );
    }
  }

  void _idcheck() async {
    debugPrint("ÏïÑÏù¥Îîî Ï≤¥ÌÅ¨ ÎßåÎì§Ïñ¥ÏïºÌï® !!!!");
    debugPrint("Ïù¥Î©îÏùº: ${emailController.text}\n");
    rootScaffoldMessengerKey.currentState!.showSnackBar(
      SnackBarStyles.info("üòì ÏïÑÏßÅ Í∏∞Îä•Ïù¥ ÏóÜÏñ¥Ïöî .."),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      //appBar: AppBar(title:,),
      backgroundColor: Colors.white,
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            //ÏïÑÏù¥Îîî ÏûÖÎ†•
            TextField(
                style: TextFiledStyles.textStlye,
                cursorColor: const Color(0xFF4738D7),
                controller: emailController,
                decoration: InputDecoration(
                    contentPadding: const EdgeInsets.fromLTRB(20, 12, 12, 10),
                    border: TextFiledStyles.borderStyle,
                    focusedBorder: TextFiledStyles.borderStyle,
                    labelText: "ÏïÑÏù¥Îîî",
                    labelStyle: TextFiledStyles.labelStyle,
                    suffixIconConstraints: const BoxConstraints(
                      minHeight: 30, // Î≤ÑÌäºÏùò ÏµúÏÜå ÎÑàÎπÑ
                      // Î≤ÑÌäºÏùò ÏµúÏÜå ÎÜíÏù¥
                    ),
                    suffixIcon: Container(
                      margin: const EdgeInsets.only(
                        right: 8,
                      ),
                      height: 30,
                      child: ElevatedButton(
                        style: ButtonStyles.smallButtonStyle(),
                        onPressed: () {
                          _idcheck();
                        },
                        child: const Text(
                          "Ï§ëÎ≥µÌôïÏù∏",
                          style: TextStyle(
                              fontWeight: FontWeight.w800, fontSize: 15),
                        ),
                      ),
                    ))),

            const SizedBox(height: 16.0),
            //ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•
            TextField(
              style: TextFiledStyles.textStlye,
              cursorColor: const Color(0xFF4738D7),
              controller: passwordController,
              decoration: InputDecoration(
                contentPadding: const EdgeInsets.fromLTRB(20, 12, 12, 10),
                border: TextFiledStyles.borderStyle,
                focusedBorder: TextFiledStyles.borderStyle,
                labelText: "ÎπÑÎ∞ÄÎ≤àÌò∏",
                labelStyle: TextFiledStyles.labelStyle,
                suffixIcon: IconButton(
                  icon: Icon(
                    _isPasswordVisible
                        ? Icons.visibility
                        : Icons.visibility_off,
                    color: Colors.grey[800],
                    size: 15,
                  ),
                  onPressed: () {
                    setState(() {
                      _isPasswordVisible = !_isPasswordVisible;
                    });
                  },
                ),
              ),
              obscureText: !_isPasswordVisible,
            ),

            const SizedBox(height: 16.0),
            //Ïù¥Î¶Ñ ÏûÖÎ†•
            TextField(
                style: TextFiledStyles.textStlye,
                cursorColor: const Color(0xFF4738D7),
                controller: nameController,
                decoration: const InputDecoration(
                  contentPadding: EdgeInsets.fromLTRB(20, 12, 12, 10),
                  border: TextFiledStyles.borderStyle,
                  focusedBorder: TextFiledStyles.borderStyle,
                  labelText: "Ïù¥Î¶Ñ",
                  labelStyle: TextFiledStyles.labelStyle,
                )),
            const SizedBox(height: 16.0),
            //ÏÉùÎÖÑÏõîÏùº ÏûÖÎ†•
            Container(
              height: 50,
              padding: const EdgeInsets.fromLTRB(20, 10, 8, 10),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(10),
                border: Border.all(
                  color: _isDatePickerOpen
                      ? const Color(0xFF4738D7) // ‚úÖ DatePickerÍ∞Ä Ïó¥Î¶¨Î©¥ Î≥¥ÎùºÏÉâ ÌÖåÎëêÎ¶¨
                      : Colors.grey[600]!,
                  width: _isDatePickerOpen ? 2.0 : 1.0,
                ),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  // Text('ÏÉùÎÖÑÏõîÏùº',
                  // style: TextFiledStyles.labelStyle,),
                  const Text(
                    "ÏÉùÎÖÑÏõîÏùº",
                    style: TextFiledStyles.labelStyle,
                  ),
                  Text(
                    !DateUtils.isSameDay(
                            selectedDate, DateTime.now()) // ‚úÖ ÎÇ†ÏßúÍ∞Ä Í∞ôÏúºÎ©¥
                        ? ' ${selectedDate!.year}ÎÖÑ\t${selectedDate!.month}Ïõî\t${selectedDate!.day}Ïùº'
                        : ' ', // ‚úÖ Í∏∞Î≥∏Í∞í
                    style: TextFiledStyles.textStlye,
                  ),
                  SizedBox(
                    height: 50,
                    child: ElevatedButton(
                      style: ButtonStyles.smallButtonStyle(),
                      onPressed: () => _showDatePicker(context),
                      child: const Text(
                        "ÏÑ†ÌÉùÌïòÍ∏∞",
                        style: TextStyle(
                            fontWeight: FontWeight.w800, fontSize: 15),
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  style: ButtonStyles.bigButtonStyle(),
                  child: const Text(
                    "Îí§Î°úÍ∞ÄÍ∏∞",
                    style: TextFiledStyles.textStlye,
                  ),
                  onPressed: () {
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                          builder: (context) => const LoginPage()),
                    );
                  },
                ),
                ElevatedButton(
                  style: ButtonStyles.bigButtonStyle(
                      backgroundColor: Colors.grey[900]!),
                  onPressed: () {
                    _register();
                  },
                  child: Text(
                    "ÌöåÏõêÍ∞ÄÏûÖ",
                    style:
                        TextFiledStyles.textStlye.copyWith(color: Colors.white),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
